50. Setup Book Management Service Methods

-- Services -> Book -> IBookService.cs, BookService.cs --
Task<Response<BookReadDto>> GetBook(int id);
Task<Response<List<BookReadDto>>> GetBooks();
Task<Response<int>> CreateBook(BookCreateDto book);
Task<Response<int>> UpdateBook(int id, BookUpdateDto book);
Task<Response<int>> DeleteBook(int id);

-- MapUIConfig.cs --
CreateMap<BookReadDto,BookUpdateDto>().ReverseMap();

-- Program.cs --
builder.Services.AddScoped<IBookService, BookService>();


51. Setup Books Index Component(With Delete Functionality)

-- BooksPage.razor --
@inject IBookService bookService
@inject IJSRuntime js

UI:
-> Authorized: create book button
-> table (image title, price, authorName, Actions(view, Authorized: update, delete)

Code:
OnInitializedAsync()
	-> bookService.GetBooks();

private async Task OnDeleteBook(int id)
{
    var book = ListofBooks.First(q => q.Id == id);
    var confirm = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete the book?");
    if (confirm)
    {
        response.Success = (await bookService.DeleteBook(id)).Success;
        if (response.Success)
            await OnInitializedAsync();
    }
}


52. Setup Create Book Component w/ File Update - Part 1 

@inject IBookService bookService
@inject IAuthorService authorService
@inject NavigationManager navManager

@attribute [Authorize(Roles = UserRoles.Administrator)]

UI:
<EditForm> (title, isbn, price, year, summary, <InputSelect> : Author, )

image:
<div>
    <label class="fw-bold">Book Cover Photo</label>
    <div>
        <InputFile OnChange="OnSelectFile" />
        <img src="@img" width="350" height="350" class="img-thumbnail">
        <p class="text-danger">@UploadFileWarning</p>
    </div>
</div>

code:
OnInitializedAsync()
   -> GetAuthors();

OnCreatingBook()
    -> CreateBook(Book);

private async Task OnSelectFile(InputFileChangeEventArgs e)
{
    var file = e.File;
    if (file != null)
    {
        var ext = Path.GetExtension(file.Name);
        if (ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg"))
        {
            var byteArray = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(byteArray);
            string imageType = file.ContentType;
            string base64String = Convert.ToBase64String(byteArray);

            Book.ImageData = base64String;
            Book.OriginalImageName = file.Name;
            img = $"data:{imageType}; base64, {base64String}";
        }
        else
        {
            UploadFileWarning = "Please select a valid image file (*.jpg || *.png)";
        }
    }
}


53. Setup Create Book Component w/ File Update - Part 2

-- BookController.cs --


public BookController(....,
                     IWebHostEnvironment webHost)


CreateBook([FromBody] BookCreateDto bookDto)
try
    {
        if (ModelState.IsValid == false)
            return BadRequest(ModelState);

        var book = _mapper.Map<Book>(bookDto);
        book.Image = CreateFile(bookDto.ImageData, bookDto.OriginalImageName);
 
        ...
    }


private string CreateFile(string imageBase64String, string originalImage)
{
    // HttpContext : have all the information of a request
    // IWebHostEnvironment: get the folder structure here

    var urlApp = HttpContext.Request.Host.Value;
    var ext = Path.GetExtension(originalImage);
    var fileName = $"{Guid.NewGuid()}{ext}";

    var path = $"{_webHost.WebRootPath}\\BookCoverImages\\{fileName}";

    byte[] imageByte = Convert.FromBase64String(imageBase64String);

    var fileStream = System.IO.File.Create(path);
    fileStream.Write(imageByte, 0, imageByte.Length);
    fileStream.Close();

    return $"https://{urlApp}/BookCoverImages/{fileName}";
}


54. Setup View Book Component

Refactorying API

-- AuthorController.cs --

GetAllBooks():
var authorsDto = await _context.Authors.Include(q => q.Books)
                                       .ProjectTo<AuthorReadDto>(_mapper.ConfigurationProvider)  
                                       .ToListAsync();  

GetAuthor(int id)
var author = await _context.Authors.Include(q => q.Books)
                                   .ProjectTo<AuthorReadDto>(_mapper.ConfigurationProvider)
                                   .FirstOrDefaultAsync(q => q.Id == id);

-- BookController.cs --

GetBooks()
var booksDto = await _context.Books.Include(q=> q.Author)
                                   .ProjectTo<BookReadDto>(_mapper.ConfigurationProvider)
                                   .ToListAsync();   

GetBook(int id)
var bookDto = await _context.Books.Include(q=> q.Author)
                                  .ProjectTo<BookReadDto>(_mapper.ConfigurationProvider)
                                  .FirstOrDefaultAsync(q => q.Id == id);


-- BookViewPage.razor --

@inject IBookService bookService
@inject NavigationManager navManager

UI:
<EditForm Model="Book">
    <fieldset disabled="true">
        -> image, title, authorname, isbn, price, year, summary, 
    </fieldset>

    -> 2 buttons: back to books, update book
</EditForm>

Code:
OnInitializedAsync()
    -> .GetBook(Id);    


55. Setup Update Book Component

-- BookController.cs -> UpdateBook(....)
{
    try{
        ....
        _mapper.Map(bookDto, book);

        if (string.IsNullOrEmpty(bookDto.ImageData) == false)
        {
            // create a new image
            book.Image = CreateImg(bookDto.ImageData, bookDto.OriginalImageName);

            // delete the old img
            var picName = Path.GetFileName(bookDto.Image);
            var imgPath = $"{_webHost.WebRootPath}\\BookCoverImages\\{picName}";
            if (System.IO.File.Exists(imgPath))
                System.IO.File.Delete(imgPath);                             
        }
            
        _context.Update(book);
        await _context.SaveChangesAsync();

        return NoContent();
    }
    ....
}


-- BookUpdatePage.razor --

UI:
<card>
    <Editform>
        -> (Title,Isbn, Price, Year, Summary, <InputSelect> Authors, <InputFile> Img)
        -> 2 buttons: Update Book, Back To List


Code:
[Parameter]
public int Id { get; set; }

BookUpdateDto? Book = new();
List<AuthorReadDto> AuthorsList = new();

Response<int>? response = new() { Success = true };
string img = string.Empty;
string UploadFileWarning = string.Empty;
long maxFileSize = 1024 * 1024 * 5;

OnInitializedAsync()
-> .GetBook(Id);
-> if (responseBook.Success) 
    -> map Response<BookReadDto> to Response<BookUpdateDto>
-> .GetAuthors();

OnUpdateBook()
-> UpdateBook(Id, Book);

private async Task OnSelectImg(InputFileChangeEventArgs e)
{
    var file = e.File;
    if (file != null)
    {
        if (file.Size > maxFileSize)
        {
            UploadFileWarning = "Please select a img less then 5Mb";
            return;
        }

        var ext = Path.GetExtension(file.Name);
        if (ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg"))
        {
            var byteArray = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(byteArray);
            string imageType = file.ContentType;
            string base64String = Convert.ToBase64String(byteArray);

            Book.ImageData = base64String;
            Book.OriginalImageName = file.Name;
            img = $"data:{imageType}; base64, {base64String}";
        }
        else
        {
            UploadFileWarning = "Please select a valid image file (*.jpg || *.png)";
            return;
        }
    }
}
