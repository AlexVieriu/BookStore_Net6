@page "/authors"

@inject IJSRuntime js
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>List of Authors</h3>
<br /><br />

@if (response?.Success == false)
{
    <h4 class="alert alert-danger">@response.Message</h4>
}

@if (Authors != null)
{
    <div class="col col-lg-8">
        <AuthorizeView Roles="Administrator">
            <a class="btn btn-success btn-lg col-2 mb-4" href="/author/create">Create Author</a>
        </AuthorizeView>

        <AuthorTable Authors="Authors" OnScroll="LoadAuthors" TotalSize="TotalSize" />
    </div>
}


@code {
    public List<AuthorReadDto>? Authors;
    public int TotalSize { get; set; }
    private Response<List<AuthorReadDtoVirtualizeResponse>> response = new() { Success = true };

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.GetWithPG(new QueryParameters { StartIndex = 0 });
        if (response.Success)
            Authors = response.Data.Items.ToList();
    }

    private async Task LoadAuthors(QueryParameters queryParam)
    {
        var virtualizeResult = await authorService.GetWithPG(queryParam);
        Authors = virtualizeResult.Data.Items.ToList();
        TotalSize = virtualizeResult.Data.TotalSize;
    }
}