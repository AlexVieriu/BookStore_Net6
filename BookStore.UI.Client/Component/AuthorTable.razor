@inject IAuthorService authorService
@inject IJSRuntime js

<table class="table table-responsive">
    <thead class="table-dark">
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Actions</th>
        </tr>
    </thead>

    <tbody>
        <Virtualize ItemsProvider="LoadAuthors" Context="author">
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-primary" href="/author/view/@author.Id">
                        <span class="oi oi-book"></span> Details
                    </a>
                    <AuthorizeView Roles="Administrator">
                        <a class="btn btn-warning" href="/author/update/@author.Id">
                            <span class="oi oi-pencil">
                            </span> Edit
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(@author.Id))">
                            <span class="oi oi-delete">
                            </span> Delete
                        </button>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

@code {
    [Parameter]
    public List<AuthorReadDto> Authors { get; set; }

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public EventCallback<QueryParameters> OnScroll { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorReadDto>> LoadAuthors(ItemsProviderRequest request)
    {
        var authorNum = Math.Min(request.Count, TotalSize - request.StartIndex);
        await OnScroll.InvokeAsync(new QueryParameters
            {
                StartIndex = request.StartIndex,
                PageSize = authorNum == 0 ? request.Count : authorNum
            });
        return new ItemsProviderResult<AuthorReadDto>(Authors, TotalSize);
    }

    private async Task Delete(int authorId)
    {
        var author = Authors.First(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are You Sure You Want To Delete {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            var response = await authorService.DeleteAuthor(authorId);
            if (response.Success)
                await OnInitializedAsync();
        }
    }
}